# Build options for use by CMake

# $Id: CMakeOptions.txt 53147 2013-11-07 20:32:41Z jmayer $

option(BUILD_wireshark   "Build the GTK+-GUI version of Wireshark" ON)
option(BUILD_qtshark     "Build the Qt-GUI version of Wireshark" ON)
option(BUILD_tshark      "Build tshark" ON)
option(BUILD_rawshark    "Build rawshark" ON)
option(BUILD_dumpcap     "Build dumpcap" ON)
option(BUILD_text2pcap   "Build text2pcap" ON)
option(BUILD_mergecap    "Build mergecap" ON)
option(BUILD_reordercap  "Build reordercap" ON)
option(BUILD_editcap     "Build editcap" ON)
option(BUILD_capinfos    "Build capinfos" ON)
option(BUILD_randpkt     "Build randpkt" ON)
option(BUILD_dftest      "Build dftest" ON)
option(AUTOGEN_dcerpc    "Autogenerate DCE RPC dissectors" OFF)
option(AUTOGEN_pidl      "Autogenerate pidl dissectors" OFF)

option(DISABLE_WERROR    "Do not treat Warnings as errors" OFF)
option(ENABLE_EXTRA_GCC_CHECKS "Do additional -W checks in GCC (disables -Werror)" OFF)
option(ENABLE_GTK3       "Use GTK3 instead of GTK2 to build wireshark" ON)
option(ENABLE_QT5        "Use Qt5 instead of Qt4 to build qtshark" ON)
option(ENABLE_PCAP       "Enable libpcap support (required for capturing)" ON)
option(WANT_PACKET_EDITOR	"Enable packet editor (experimental)" ON)
#
# Do not make this the default on UN*X; AirPcap support is available
# only on Windows.  It might be nice to have it, on Windows, check
# whether the AirPcap SDK is available, and turn AirPcap support on
# only if it is.
#
if(WIN32)
	option(ENABLE_AIRPCAP    "Enable AirPcap support" ON)
else()
	option(ENABLE_AIRPCAP    "Enable AirPcap support" OFF)
endif()
# todo
option(ENABLE_STATIC     "Build a static version of Wireshark (not yet working)" OFF)
option(ENABLE_ECHLD      "Enable echld support" OFF)
option(ENABLE_PLUGINS    "Build with plugins" ON)
option(ENABLE_GUIDES     "Build Guides" OFF)
option(ENABLE_PCAP_NG_DEFAULT	"Enable pcap-ng as default file format" ON)

option(ENABLE_ADNS       "Build with adns support" ON)
option(ENABLE_PORTAUDIO  "Build with PortAudio support" ON)
option(ENABLE_ZLIB       "Build with zlib compression support" ON)
option(ENABLE_LUA        "Build with Lua dissector support" ON)
option(ENABLE_PYTHON     "Build with Python dissector support" OFF)
option(ENABLE_SMI        "Build with libsmi snmp support" ON)
option(ENABLE_GNUTLS     "Build with GNU TLS support" ON)
option(ENABLE_GCRYPT     "Build with GNU crypto support" ON)
option(ENABLE_GEOIP      "Build with GeoIP support" ON)
option(ENABLE_CAP        "Build with Posix capabilities support" ON)
option(ENABLE_CARES      "Build with c-ares support" ON)
option(ENABLE_NETLINK    "Build with libnl support" ON)
# todo Mostly hardcoded
option(ENABLE_KERBEROS   "Build with Kerberos support" ON)
